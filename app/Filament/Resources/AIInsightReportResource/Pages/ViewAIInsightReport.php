<?php

namespace App\Filament\Resources\AIInsightReportResource\Pages;

use App\Filament\Resources\AIInsightReportResource;
use Filament\Actions;
use Filament\Resources\Pages\ViewRecord;
use Filament\Infolists;
use Filament\Infolists\Infolist;

class ViewAIInsightReport extends ViewRecord
{
    protected static string $resource = AIInsightReportResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\EditAction::make(),
            Actions\DeleteAction::make(),
        ];
    }

    public function infolist(Infolist $infolist): Infolist
    {
        return $infolist
        
            ->schema([
                Infolists\Components\Section::make('Report Details')
                    ->schema([
                        Infolists\Components\TextEntry::make('type_display')
                            ->label('Analysis Type')
                            ->badge()
                            ->color(fn (string $state): string => match ($state) {
                                'Revenue Analysis' => 'success',
                                'Service Performance' => 'info',
                                'Customer Insights' => 'warning',
                                'Revenue Forecast' => 'danger',
                                default => 'gray',
                            }),
                            
                        Infolists\Components\TextEntry::make('generated_at')
                            ->label('Generated At')
                            ->dateTime(),
                            
                        Infolists\Components\TextEntry::make('user.name')
                            ->label('Generated By'),
                            
                        Infolists\Components\TextEntry::make('status')
                            ->badge()
                            ->color(fn (string $state): string => match ($state) {
                                'completed' => 'success',
                                'generating' => 'warning',
                                'failed' => 'danger',
                                default => 'gray',
                            }),
                    ])
                    ->columns(2),

                Infolists\Components\Section::make('AI Insights')
                    ->schema([
                        Infolists\Components\TextEntry::make('data.summary')
                            ->label('Summary')
                            ->prose()
                            ->columnSpanFull(),
                            
                        Infolists\Components\TextEntry::make('data.key_findings')
                            ->label('Key Findings')
                            ->prose()
                            ->columnSpanFull(),
                            
                        Infolists\Components\TextEntry::make('data.recommendations')
                            ->label('Recommendations')
                            ->prose()
                            ->columnSpanFull(),
                            
                        Infolists\Components\TextEntry::make('data.forecast_predictions')
                            ->label('Forecast & Predictions')
                            ->prose()
                            ->columnSpanFull()
                            ->visible(fn ($record) => !empty($record->data['forecast_predictions'])),
                    ]),
                    
                Infolists\Components\Section::make('Technical Details')
                    ->schema([
                        Infolists\Components\TextEntry::make('data.confidence_score')
                            ->label('AI Confidence Score')
                            ->suffix('%')
                            ->color(fn ($state) => $state >= 80 ? 'success' : ($state >= 60 ? 'warning' : 'danger')),
                            
                        Infolists\Components\TextEntry::make('created_at')
                            ->label('Report Created')
                            ->dateTime(),
                    ])
                    ->columns(2)
                    ->collapsible(),
                    Infolists\Components\Section::make('Raw Response')
                    ->schema([
                        Infolists\Components\TextEntry::make('data.raw_response')
                            ->label('Raw Response')
                            ->prose()
                            ->columnSpanFull(),
                    ])
                    ->collapsible(),
            ]);
    }
}